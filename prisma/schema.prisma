generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(cuid())
  email            String             @unique
  password         String
  stripeCustomerId String?            @unique // Stripe customer ID
  isProfileComplete Boolean           @default(false) // Track if user completed full registration
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  profile          Profile?
  subscription     Subscription?
  googleIntegration GoogleIntegration?
  passwordResetTokens PasswordResetToken[]

  @@map("users")
}

model Profile {
  id              String          @id
  firstName       String
  lastName        String
  phoneNumber     String?
  avatarUrl       String?         // URL to profile image stored in Vercel Blob
  isComplete      Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  weights         Weight[]
  foodIntakes     FoodIntake[]
  bloodPressures  BloodPressure[]
  bloodSugars     BloodSugar[]
  activities      Activity[]
  glp1Entries     Glp1Entry[]
  medications     Medication[]
  doctorNote      DoctorNote?
  journals        Journal[]
  user            User            @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Weight {
  id           String   @id @default(cuid())
  weight       Float
  capturedDate DateTime // date when the weight was actually measured
  profileId    String
  profile      Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("weights")
}

model FoodIntake {
  id           String   @id @default(cuid())
  mealType     String
  food         String
  calories     Int
  capturedDate DateTime // date when the food was actually consumed
  profileId    String
  profile      Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("food_intakes")
}

model BloodPressure {
  id           String   @id @default(cuid())
  systolic     Int
  diastolic    Int
  capturedDate DateTime // date when the blood pressure was actually measured
  profileId    String
  profile      Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("blood_pressures")
}

model Activity {
  id           String   @id @default(cuid())
  type         String
  duration     Int      // duration in minutes
  capturedDate DateTime // date when the activity actually happened
  profileId    String
  profile      Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("activities")
}

model BloodSugar {
  id              String   @id @default(cuid())
  level           Float    // blood sugar level in mg/dL
  measurementType String   // fasting, before_meal, after_meal, bedtime
  capturedDate    DateTime // date when the blood sugar was actually measured
  profileId       String
  profile         Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("blood_sugars")
}

model Glp1Entry {
  id           String   @id @default(cuid())
  type         String   // Ozempic, Wegovy, Mounjaro, Zepbound
  dose         Float    // dosage in mg
  capturedDate DateTime // date when the injection actually happened
  profileId    String
  profile      Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("glp1_entries")
}

model Medication {
  id                String       @id @default(cuid())
  name              String       // medication name
  dosage            Float        // dosage amount (e.g., 10)
  dosageUnit        DosageUnit   @default(MG) // dosage unit (mg, g, ml, etc.)
  description       String?      // optional description
  prescribingDoctor String?      // prescribing doctor
  status            String       @default("active") // active, paused, inactive
  startDate         DateTime     // when to start taking the medication
  repeatEvery       Int          @default(1) // repeat frequency number
  repeatUnit        String       @default("Day(s)") // Day(s), Week(s)
  enableReminders   Boolean      @default(false) // whether reminders are enabled
  profileId         String
  profile           Profile      @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@map("medications")
}

model DoctorNote {
  id        String   @id @default(cuid())
  content   String   // the note content
  profileId String   @unique
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("doctor_notes")
}

model Journal {
  id           String   @id @default(cuid())
  title        String?  // optional title for the journal entry
  content      String   // the journal content (HTML from Tiptap editor)
  capturedDate DateTime // date when the journal was written
  profileId    String
  profile      Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("journals")
}

enum DosageUnit {
  MG    // milligrams
  G     // grams
  ML    // milliliters
  L     // liters
  IU    // international units
  MCG   // micrograms
  UNITS // units
}

// Plan subscription yang tersedia
model Plan {
  id            String         @id @default(cuid())
  name          String         // "Basic", "Premium", "Pro"
  description   String?
  price         Decimal        // Harga per bulan/tahun
  currency      String         @default("USD")
  interval      String         // "month" atau "year"
  stripePriceId String?        // Stripe Price ID for checkout
  features      Json?          // Features dalam format JSON
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]

  @@map("plans")
}

// Subscription utama user
model Subscription {
  id                 String               @id @default(cuid())
  userId             String               @unique
  planId             String
  status             SubscriptionStatus   @default(PENDING)
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  
  // Relations
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan               Plan                 @relation(fields: [planId], references: [id])
  paymentMethods     PaymentMethod[]
  payments           Payment[]

  @@map("subscriptions")
}

// Payment method untuk menyimpan info dari gateway
model PaymentMethod {
  id             String         @id @default(cuid())
  subscriptionId String
  gateway        PaymentGateway
  gatewayId      String         // Customer ID dari Stripe/PayPal
  gatewaySubId   String?        // Subscription ID dari gateway
  isDefault      Boolean        @default(false)
  isActive       Boolean        @default(true)
  metadata       Json?          // Data tambahan dari gateway
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  // Relations
  subscription   Subscription   @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  payments       Payment[]

  @@unique([subscriptionId, gateway]) // Satu user hanya bisa punya 1 method per gateway
  @@map("payment_methods")
}

// Record semua pembayaran
model Payment {
  id               String        @id @default(cuid())
  subscriptionId   String
  paymentMethodId  String
  amount           Decimal
  currency         String        @default("USD")
  status           PaymentStatus @default(PENDING)
  gatewayPaymentId String?       // Payment ID dari gateway
  failureReason    String?
  paidAt           DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
  // Relations
  subscription     Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  paymentMethod    PaymentMethod @relation(fields: [paymentMethodId], references: [id])

  @@map("payments")
}

// ENUMS
enum SubscriptionStatus {
  PENDING    // Baru dibuat, belum bayar
  ACTIVE     // Sedang aktif
  CANCELED   // Dibatalkan user
  EXPIRED    // Kedaluwarsa
  SUSPENDED  // Disuspend karena gagal bayar
}

enum PaymentGateway {
  STRIPE
  PAYPAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELED
}

// Google Calendar Integration Models
model GoogleIntegration {
  id           String          @id @default(cuid())
  userId       String          @unique
  accessToken  String
  refreshToken String
  tokenExpiry  DateTime
  calendarId   String?
  isActive     Boolean         @default(true)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  
  // Relations
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  events       CalendarEvent[]

  @@map("google_integrations")
}

model CalendarEvent {
  id                  String            @id @default(cuid())
  googleIntegrationId String
  googleEventId       String            @unique
  title               String
  description         String?
  startTime           DateTime
  endTime             DateTime
  isAllDay            Boolean           @default(false)
  location            String?
  attendees           String[]
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  
  // Relations
  googleIntegration   GoogleIntegration @relation(fields: [googleIntegrationId], references: [id], onDelete: Cascade)

  @@map("calendar_events")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}
